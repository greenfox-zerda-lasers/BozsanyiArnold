data structure:
{
	"address": {
		"building": "469",
		"coord": [-73.961704, 40.662942],
		"street": "Flatbush Avenue",
		"zipcode": "11225"
	},
	"borough": "Brooklyn",
	"cuisine": "Hamburgers",
	"grades": [
		{"date": {"$date": 1419897600000},"grade": "A", "score": 8},
		{"date": {"$date": 1404172800000}, "grade": "B", "score": 23},
		{"date": {"$date": 1367280000000}, "grade": "A", "score": 12},
		{"date": {"$date": 1336435200000}, "grade": "A", "score": 12}
	],
	"name": "Wendy'S", "restaurant_id": "30112340"
}

to display all the documents in the collection restaurants.
solution: db.restaurants.find()

to display the fields restaurant_id, name, borough and cuisine for all the documents in the collection restaurant.
solution: db.restaurants.find({}, {restaurant_id: true, name: true, borough: true, cuisine: true})

to display the fields restaurant_id, name, borough and cuisine, but exclude the field _id for all the documents in the collection restaurant.
solution: db.restaurants.find({}, {restaurant_id: true, name: true, borough: true, cuisine: true, _id: false})

to display the fields restaurant_id, name, borough and zipcode, but exclude the field _id for all the documents in the collection restaurant.
solution: db.restaurants.find({}, {restaurant_id: true, name: true, borough: true, "address.zipcode": true, _id: false})

to display all the restaurant which is in the borough Bronx.
solution: db.restaurants.find({borough: "Brooklyn"}, {name: true})

to display the first 5 restaurant which is in the borough Bronx.
solution: db.restaurants.find({borough: "Brooklyn"}, {name: true}).limit(5)

to display the next 5 restaurants after skipping first 5 which are in the borough Bronx.
solution: db.restaurants.find({borough: "Brooklyn"}, {name: true}).limit(5).skip(5)

to find the restaurants who achieved a score more than 90.
solution: db.restaurants.find({"grades.score": {$gt:90}}, {name: true})

to find the restaurants that achieved a score, more than 80 but less than 100.
solution: db.restaurants.find({"grades.score": {$gt:80, $lt:100}}, {name: true})

to find the restaurants which locates in latitude value less than -95.754168.
solution: db.restaurants.find({"address.coord.0": {$lt:-95.754168}},{name: true})

to find the restaurants that does not prepare any cuisine of 'American' and their grade score more than 70 and lattitude less than -65.754168.
solution: db.restaurants.find({"grades.score": {$gt:70}, "address.coord": {$lt:-65.754168}, "cuisine": "American "}, {name:true})

to find the restaurants which does not prepare any cuisine of 'American' and achieved a score more than 70 and not located in the longitude less than -65.754168.
solution: db.restaurants.find({"grades.score": {$gt:70}, "address.coord": {$gte:-65.754168}, "cuisine": "American "}, {name:true})

to find the restaurants which does not prepare any cuisine of 'American ' and achieved a grade point 'A' not belongs to the borough Brooklyn. The document must be displayed according to the cuisine in descending order.
solution: db.restaurants.find({"cuisine": {$ne:"American "}, "borough": {$ne:"Brooklyn"}, "grades.grade": "A"}, {name: true}).sort({"cuisine": -1})

to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Wil' as first three letters for its name.
solution: db.restaurants.find({name: /^Wil/}, {name: true, borough: true, cuisine: true, restaurant_id: true, _id: false})

to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'ces' as last three letters for its name.
solution: db.restaurants.find({name: /ces$/}, {name: true, borough: true, cuisine: true, restaurant_id: true, _id: false})

to find the restaurant Id, name, borough and cuisine for those restaurants which contains 'Reg' as three letters somewhere in its name.
solution: db.restaurants.find({name: /Reg/}, {name: true, borough: true, cuisine: true, restaurant_id: true, _id: false})

to find the restaurants which belongs to the borough Bronx and prepared either American or Chinese dish.
solution: db.restaurants.find({$or: [{"cuisine": "American "}, {"cuisine": "Chinese"}], "borough": "Bronx"}, {name:true})

to find the restaurant Id, name, borough and cuisine for those restaurants which belongs to the borough Staten Island or Queens or Bronx or Brooklyn.
solution: db.restaurants.find({$or: [{"borough": "Bronx"}, {"borough": "Staten Island"}, {"borough": "Queens"}, {"borough": "Brooklyn"}], "borough": "Bronx"}, {restaurant_id: true, name:true, borough: true})

to find the restaurant Id, name, borough and cuisine for those restaurants which are not belonging to the borough Staten Island or Queens or Bronx or Brooklyn.
solution: db.restaurants.find({$or: [{"borough": {$ne:"Bronx"}}, {"borough": {$ne:"Staten Island"}}, {"borough": {$ne:"Queens"}}, {"borough": {$ne:"Brooklyn"}}], "borough": "Bronx"}, {restaurant_id: true, name:true, borough: true})

to find the restaurant Id, name, borough and cuisine for those restaurants which achieved a score which is not more than 10.
solution: db.restaurants.find({"grades.score": {$lt:10}}, {restaurant_id: true, name: true, borough: true, cuisine: true})

to find the restaurant Id, name, borough and cuisine for those restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name begins with letter 'Wil'.
solution: db.restaurants.find({$nor: [{"cuisine":"American "}, {"cuisine":"Chinese"}], "name": "^Wil"}, {restaurant_id: true, name: true, borough: true, cuisine: true})

to find the restaurant Id, name and grades for those restaurants which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among many of survey dates..
solution: db.restaurants.find({"grades.grade": "A", "grades.score": 11, "grades.date": ISODate("2014-08-11T00:00:00Z")}, {restaurant_id: true, name: true, grades: true})

to find the restaurant Id, name and grades for those restaurants where 2nd element of grades array contains a grade of "A" and score 9 on an ISODate ("2014-08-11T00:00:00Z").
db.restaurants.find({"grades.1.grade":"A", "grades.1.date":ISODate ("2014-08-11T00:00:00Z"), "grades.1.score": 9 }, {restaurant_id: true, name: true, grades: true})

to arrange the name of the restaurants in ascending order along with all the columns.
db.restaurants.find().sort({name:1})

to arrange the name of the restaurants in descending along with all the columns.
db.restaurants.find({}, {_id: false, name: true}).sort({name:-1})

to arranged the name of the cuisine in ascending order and for those same cuisine borough should be in descending order.
db.restaurants.find().sort({cuinese:1}).sort({cuinese:-1})

to know whether all the addresses contains the street or not.
db.restaurants.find({"address.street": {$exists: true}}).pretty()

which will select all documents in the restaurants collection where the coord field value is Double.
db.restaurants.find({"adress.coord" : {$type: 1}})

which will select the restaurant Id, name and grades for those restaurants which returns 0 as a remainder after dividing the score by 7.
